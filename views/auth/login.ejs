<%- contentFor('body') %>

<div class="min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50 flex flex-col justify-center -mt-6 sm:-mt-12">
    <!-- Background Pattern -->
    <div class="absolute inset-0 overflow-hidden pointer-events-none">
        <div class="absolute -top-40 -right-40 w-80 h-80 bg-gradient-to-br from-blue-400 to-indigo-600 rounded-full opacity-10 blur-3xl"></div>
        <div class="absolute -bottom-40 -left-40 w-80 h-80 bg-gradient-to-br from-purple-400 to-pink-600 rounded-full opacity-10 blur-3xl"></div>
    </div>

    <div class="sm:mx-auto sm:w-full sm:max-w-md relative z-10">
        <!-- Logo and Header -->
        <div class="text-center mb-6 sm:mb-8">
            <div class="mx-auto w-14 h-14 sm:w-16 sm:h-16 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-2xl flex items-center justify-center mb-4 sm:mb-6 shadow-lg">
                <i class="fas fa-calendar-alt text-white text-xl sm:text-2xl"></i>
            </div>
            <h1 class="text-2xl sm:text-3xl font-bold bg-gradient-to-r from-gray-900 to-gray-700 bg-clip-text text-transparent">
                Welcome Back!
            </h1>
            <p class="text-gray-600 mt-2 text-sm">
                Sign in to access your timetable
            </p>
        </div>

        <!-- Login Card -->
        <div class="bg-white py-6 sm:py-8 px-4 sm:px-6 shadow-xl rounded-2xl border border-gray-100 sm:mx-0">
            <!-- Error/Success Messages -->
            <div id="message-container" class="hidden mb-6">
                <div id="error-message" class="hidden bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-xl text-sm">
                    <div class="flex items-center">
                        <i class="fas fa-exclamation-circle mr-2"></i>
                        <span id="error-text"></span>
                    </div>
                </div>
                <div id="success-message" class="hidden bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-xl text-sm">
                    <div class="flex items-center">
                        <i class="fas fa-check-circle mr-2"></i>
                        <span id="success-text"></span>
                    </div>
                </div>
            </div>

            <form id="login-form" action="/auth/login" method="POST" class="space-y-5" novalidate>
                <!-- Roll Number Field -->
                <div class="form-group">
                    <label for="rollNumber" class="block text-sm font-semibold text-gray-700 mb-1.5">
                        <i class="fas fa-id-card mr-2 text-blue-500"></i>
                        Roll Number
                    </label>
                    <div class="relative">
                        <input 
                            type="text" 
                            name="rollNumber" 
                            id="rollNumber" 
                            required 
                            autocomplete="username"
                            class="input-field"
                            placeholder="Enter your roll number"
                            data-validate="rollNumber"
                        >
                        <div class="absolute inset-y-0 right-0 pr-3 flex items-center">
                            <i class="fas fa-user text-gray-400 validation-icon"></i>
                        </div>
                    </div>
                    <div class="error-message hidden mt-1 text-xs text-red-600">
                        <i class="fas fa-exclamation-triangle mr-1"></i>
                        <span class="error-text"></span>
                    </div>
                </div>

                <!-- Password Field -->
                <div class="form-group">
                    <label for="password" class="block text-sm font-semibold text-gray-700 mb-1.5">
                        <i class="fas fa-lock mr-2 text-blue-500"></i>
                        Password
                    </label>
                    <div class="relative">
                        <input 
                            type="password" 
                            name="password" 
                            id="password" 
                            required 
                            autocomplete="current-password"
                            class="input-field pr-12"
                            placeholder="Enter your password"
                            data-validate="password"
                        >
                        <div class="absolute inset-y-0 right-0 flex items-center">
                            <button 
                                type="button" 
                                id="toggle-password"
                                class="px-3 py-2 text-gray-400 hover:text-gray-600 focus:outline-none focus:text-gray-600 transition-colors duration-200"
                                aria-label="Toggle password visibility"
                                tabindex="-1"
                            >
                                <i class="fas fa-eye" id="password-icon"></i>
                            </button>
                        </div>
                    </div>
                    <div class="error-message hidden mt-1 text-xs text-red-600">
                        <i class="fas fa-exclamation-triangle mr-1"></i>
                        <span class="error-text"></span>
                    </div>
                </div>

                <!-- Remember Me & Forgot Password -->
                <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-3 sm:space-y-0">
                    <div class="flex items-center">
                        <div class="relative">
                            <input 
                                type="checkbox" 
                                name="remember" 
                                id="remember" 
                                class="sr-only"
                            >
                            <label for="remember" class="flex items-center cursor-pointer">
                                <div class="checkbox-custom mr-3"></div>
                                <span class="text-sm text-gray-700 select-none">Remember me</span>
                            </label>
                        </div>
                    </div>

                    <div class="text-sm">
                        <a href="/auth/forgot-password" class="font-medium text-blue-600 hover:text-blue-500 transition-colors duration-200 flex items-center">
                            <i class="fas fa-question-circle mr-1"></i>
                            Forgot password?
                        </a>
                    </div>
                </div>

                <!-- Submit Button -->
                <div class="mt-6">
                    <button 
                        type="submit" 
                        id="submit-btn"
                        class="w-full flex justify-center items-center py-2.5 sm:py-3 px-4 border border-transparent rounded-xl text-sm font-semibold text-white bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transform hover:scale-[1.02] transition-all duration-200 shadow-lg hover:shadow-xl"
                    >
                        <span id="submit-text">Sign In</span>
                        <i id="submit-spinner" class="fas fa-spinner fa-spin ml-2 hidden"></i>
                    </button>
                </div>

                <!-- Divider -->
                <div class="relative my-6">
                    <div class="absolute inset-0 flex items-center">
                        <div class="w-full border-t border-gray-200"></div>
                    </div>
                    <div class="relative flex justify-center text-sm">
                        <span class="px-4 bg-white text-gray-500">First time here?</span>
                    </div>
                </div>

                <!-- First Time Login Info -->
                <div class="bg-blue-50 border border-blue-200 rounded-xl p-3 sm:p-4">
                    <div class="flex items-start">
                        <div class="flex-shrink-0">
                            <i class="fas fa-info-circle text-blue-500 mt-0.5"></i>
                        </div>
                        <div class="ml-3">
                            <h3 class="text-sm font-semibold text-blue-800 mb-1">First Time Login</h3>
                            <div class="text-sm text-blue-700 space-y-1">
                                <p>Use your roll number and the default password:</p>
                                <div class="bg-blue-100 px-3 py-2 rounded-lg font-mono text-blue-900 text-sm inline-block">
                                    passme@123
                                </div>
                                <p class="text-xs mt-2 text-blue-600">
                                    You'll be prompted to change your password after first login.
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>

        <!-- Additional Links -->
        <div class="mt-6 sm:mt-8 text-center">
            <div class="text-sm text-gray-600">
                <span>Need help? </span>
                <a href="/contact" class="font-medium text-blue-600 hover:text-blue-500 transition-colors duration-200">
                    Contact Support
                </a>
            </div>
            <div class="mt-4 flex justify-center space-x-6 text-xs text-gray-500">
                <a href="/privacy-policy" class="hover:text-gray-700 transition-colors duration-200">Privacy Policy</a>
                <a href="/terms" class="hover:text-gray-700 transition-colors duration-200">Terms of Service</a>
            </div>
        </div>
    </div>
</div>

<%- contentFor('style') %>
<style>
    /* Custom Form Styles */
    .input-field {
        @apply appearance-none block w-full px-3 sm:px-4 py-2.5 sm:py-3 border border-gray-200 rounded-xl shadow-sm placeholder-gray-400 text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-gray-50 focus:bg-white transition-all duration-200;
    }

    .input-field:focus {
        @apply transform scale-[1.02];
    }

    .input-field.error {
        @apply border-red-300 bg-red-50 focus:ring-red-500;
    }

    .input-field.success {
        @apply border-green-300 bg-green-50 focus:ring-green-500;
    }

    /* Custom Checkbox */
    .checkbox-custom {
        @apply w-5 h-5 border-2 border-gray-300 rounded bg-white relative transition-all duration-200 cursor-pointer;
    }

    .checkbox-custom::before {
        content: '';
        @apply absolute inset-0 bg-gradient-to-r from-blue-500 to-indigo-600 rounded opacity-0 transition-opacity duration-200;
    }

    .checkbox-custom::after {
        content: '\f00c';
        font-family: 'Font Awesome 5 Free';
        font-weight: 900;
        @apply absolute inset-0 flex items-center justify-center text-white text-xs opacity-0 transition-opacity duration-200;
    }

    input[type="checkbox"]:checked + label .checkbox-custom::before,
    input[type="checkbox"]:checked + label .checkbox-custom::after {
        @apply opacity-100;
    }

    input[type="checkbox"]:checked + label .checkbox-custom {
        @apply border-blue-500;
    }

    /* Validation Icons */
    .validation-icon.success {
        @apply text-green-500;
    }

    .validation-icon.error {
        @apply text-red-500;
    }

    /* Loading Animation */
    .form-loading {
        @apply pointer-events-none opacity-75;
    }

    /* Shake Animation for Errors */
    @keyframes shake {
        0%, 100% { transform: translateX(0); }
        25% { transform: translateX(-5px); }
        75% { transform: translateX(5px); }
    }

    .shake {
        animation: shake 0.5s ease-in-out;
    }

    /* Pulse Animation for Success */
    @keyframes pulse-success {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); }
        100% { transform: scale(1); }
    }

    .pulse-success {
        animation: pulse-success 0.6s ease-in-out;
    }

    /* Mobile Optimizations */
    @media (max-width: 640px) {
        .input-field {
            font-size: 16px; /* Prevent zoom on iOS */
        }
        
        .input-field::placeholder {
            font-size: 14px;
        }
        
        .checkbox-custom {
            @apply w-4 h-4;
        }
    }

    /* Focus Visible for Better Accessibility */
    .input-field:focus-visible {
        @apply ring-2 ring-blue-500 ring-offset-2;
    }

    button:focus-visible {
        @apply ring-2 ring-blue-500 ring-offset-2;
    }
</style>

<%- contentFor('script') %>
<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('login-form');
    const submitBtn = document.getElementById('submit-btn');
    const submitText = document.getElementById('submit-text');
    const submitSpinner = document.getElementById('submit-spinner');
    const togglePassword = document.getElementById('toggle-password');
    const passwordInput = document.getElementById('password');
    const passwordIcon = document.getElementById('password-icon');

    // Verify elements exist
    if (!togglePassword || !passwordInput || !passwordIcon) {
        console.error('Password toggle elements not found');
        return;
    }

    // Form validation rules
    const validationRules = {
        rollNumber: {
            required: true,
            pattern: /^[A-Za-z0-9]{6,12}$/,
            message: 'Roll number must be 6-12 characters long'
        },
        password: {
            required: true,
            minLength: 6,
            message: 'Password must be at least 6 characters long'
        }
    };

    // Initialize form
    initializeForm();

    function initializeForm() {
        // Setup real-time validation
        setupValidation();
        
        // Setup password toggle
        setupPasswordToggle();
        
        // Setup form submission
        setupFormSubmission();
        
        // Setup keyboard shortcuts
        setupKeyboardShortcuts();
        
        // Auto-focus first input
        document.getElementById('rollNumber').focus();
    }

    function setupValidation() {
        Object.keys(validationRules).forEach(fieldName => {
            const field = document.getElementById(fieldName);
            const formGroup = field.closest('.form-group');
            
            // Real-time validation on input
            field.addEventListener('input', () => validateField(field, formGroup));
            
            // Validation on blur
            field.addEventListener('blur', () => validateField(field, formGroup));
            
            // Clear validation on focus
            field.addEventListener('focus', () => clearFieldValidation(field, formGroup));
        });
    }

    function validateField(field, formGroup) {
        const fieldName = field.name;
        const value = field.value.trim();
        const rules = validationRules[fieldName];
        const errorElement = formGroup.querySelector('.error-message');
        const errorText = errorElement.querySelector('.error-text');
        const validationIcon = formGroup.querySelector('.validation-icon');

        let isValid = true;
        let errorMessage = '';

        // Required validation
        if (rules.required && !value) {
            isValid = false;
            errorMessage = `${fieldName.charAt(0).toUpperCase() + fieldName.slice(1)} is required`;
        }
        // Pattern validation
        else if (rules.pattern && value && !rules.pattern.test(value)) {
            isValid = false;
            errorMessage = rules.message;
        }
        // Min length validation
        else if (rules.minLength && value && value.length < rules.minLength) {
            isValid = false;
            errorMessage = rules.message;
        }

        // Update UI based on validation result
        if (isValid && value) {
            field.classList.remove('error');
            field.classList.add('success');
            errorElement.classList.add('hidden');
            if (validationIcon) {
                validationIcon.classList.remove('error');
                validationIcon.classList.add('success');
                validationIcon.className = validationIcon.className.replace(/fa-\w+/, 'fa-check');
            }
        } else if (!isValid) {
            field.classList.remove('success');
            field.classList.add('error');
            errorText.textContent = errorMessage;
            errorElement.classList.remove('hidden');
            if (validationIcon) {
                validationIcon.classList.remove('success');
                validationIcon.classList.add('error');
                validationIcon.className = validationIcon.className.replace(/fa-\w+/, 'fa-exclamation-triangle');
            }
            
            // Shake animation for error
            field.classList.add('shake');
            setTimeout(() => field.classList.remove('shake'), 500);
        }

        return isValid;
    }

    function clearFieldValidation(field, formGroup) {
        field.classList.remove('error', 'success');
        const errorElement = formGroup.querySelector('.error-message');
        errorElement.classList.add('hidden');
        
        const validationIcon = formGroup.querySelector('.validation-icon');
        if (validationIcon) {
            validationIcon.classList.remove('error', 'success');
            validationIcon.className = validationIcon.className.replace(/fa-\w+/, 'fa-user');
        }
    }

    function setupPasswordToggle() {
        if (!togglePassword || !passwordInput || !passwordIcon) {
            console.error('Password toggle elements not found');
            return;
        }

        togglePassword.addEventListener('mousedown', function(e) {
            // Prevent the button from taking focus
            e.preventDefault();
        });

        togglePassword.addEventListener('click', function(e) {
            // Prevent any default behavior
            e.preventDefault();
            e.stopPropagation();
            
            // Toggle password visibility
            const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
            passwordInput.setAttribute('type', type);
            
            // Toggle icon
            if (type === 'text') {
                passwordIcon.classList.remove('fa-eye');
                passwordIcon.classList.add('fa-eye-slash');
                togglePassword.setAttribute('aria-label', 'Hide password');
            } else {
                passwordIcon.classList.remove('fa-eye-slash');
                passwordIcon.classList.add('fa-eye');
                togglePassword.setAttribute('aria-label', 'Show password');
            }
        });
    }

    function setupFormSubmission() {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Validate all fields
            let isFormValid = true;
            Object.keys(validationRules).forEach(fieldName => {
                const field = document.getElementById(fieldName);
                const formGroup = field.closest('.form-group');
                if (!validateField(field, formGroup)) {
                    isFormValid = false;
                }
            });

            if (!isFormValid) {
                showMessage('Please fix the errors above', 'error');
                return;
            }

            // Show loading state
            setLoadingState(true);

            // Simulate form submission (replace with actual submission)
            setTimeout(() => {
                // For demo purposes, simulate success/error
                const rollNumber = document.getElementById('rollNumber').value;
                
                if (rollNumber.toLowerCase() === 'demo') {
                    showMessage('Invalid credentials. Please try again.', 'error');
                    setLoadingState(false);
                } else {
                    // Actual form submission
                    form.submit();
                }
            }, 1500);
        });
    }

    function setLoadingState(loading) {
        if (loading) {
            submitBtn.disabled = true;
            submitBtn.classList.add('form-loading');
            submitText.textContent = 'Signing In...';
            submitSpinner.classList.remove('hidden');
            form.classList.add('form-loading');
        } else {
            submitBtn.disabled = false;
            submitBtn.classList.remove('form-loading');
            submitText.textContent = 'Sign In';
            submitSpinner.classList.add('hidden');
            form.classList.remove('form-loading');
        }
    }

    function showMessage(message, type) {
        const messageContainer = document.getElementById('message-container');
        const errorMessage = document.getElementById('error-message');
        const successMessage = document.getElementById('success-message');
        const errorText = document.getElementById('error-text');
        const successText = document.getElementById('success-text');

        // Hide all messages first
        errorMessage.classList.add('hidden');
        successMessage.classList.add('hidden');

        // Show appropriate message
        if (type === 'error') {
            errorText.textContent = message;
            errorMessage.classList.remove('hidden');
        } else {
            successText.textContent = message;
            successMessage.classList.remove('hidden');
        }

        messageContainer.classList.remove('hidden');

        // Auto-hide after 5 seconds
        setTimeout(() => {
            messageContainer.classList.add('hidden');
        }, 5000);

        // Scroll to top to show message
        messageContainer.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }

    function setupKeyboardShortcuts() {
        document.addEventListener('keydown', function(e) {
            // Enter key to submit form
            if (e.key === 'Enter' && !e.shiftKey) {
                const activeElement = document.activeElement;
                if (activeElement.tagName === 'INPUT') {
                    form.dispatchEvent(new Event('submit'));
                }
            }
            
            // Escape key to clear form
            if (e.key === 'Escape') {
                clearForm();
            }
        });
    }

    function clearForm() {
        form.reset();
        document.querySelectorAll('.form-group').forEach(group => {
            const field = group.querySelector('input');
            clearFieldValidation(field, group);
        });
        document.getElementById('rollNumber').focus();
    }

    // Auto-fill demo credentials (for testing)
    if (window.location.search.includes('demo=true')) {
        document.getElementById('rollNumber').value = 'DEMO123';
        document.getElementById('password').value = 'passme@123';
    }

    // Handle browser back button
    window.addEventListener('pageshow', function(event) {
        if (event.persisted) {
            setLoadingState(false);
        }
    });
});
</script>